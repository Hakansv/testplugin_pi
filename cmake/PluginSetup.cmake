#
# Export variables used in plugin setup: GIT_HASH, GIT_COMMIT, PKG_TARGET, PKG_TARGET_VERSION and PKG_NVR

execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE)

execute_process(
  COMMAND git log -1 --format=%ci
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_DATE
  OUTPUT_STRIP_TRAILING_WHITESPACE)

message(STATUS "OCPN_FLATPAK_CONFIG: ${OCPN_FLATPAK_CONFIG}, UNIX: ${UNIX}")
if(OCPN_FLATPAK_CONFIG OR OCPN_FLATPAK_BUILD)
  set(PKG_TARGET "flatpak")
  set(PKG_TARGET_VERSION "18.08") # As of flatpak/*yaml
elseif(MINGW)
  set(PKG_TARGET "mingw")
  if(CMAKE_SYSTEM_VERSION)
    set(PKG_TARGET_VERSION ${CMAKE_SYSTEM_VERSION})
  else()
    set(PKG_TARGET_VERSION 10)
  endif()
elseif(MSVC)
  set(PKG_TARGET "msvc")
  if(CMAKE_SYSTEM_VERSION)
    set(PKG_TARGET_VERSION ${CMAKE_SYSTEM_VERSION})
  elseif(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)
    set(PKG_TARGET_VERSION ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION})
  else()
    set(PKG_TARGET_VERSION 10)
  endif()
elseif(APPLE)
  set(PKG_TARGET "darwin")
  execute_process(COMMAND "sw_vers" "-productVersion" OUTPUT_VARIABLE PKG_TARGET_VERSION)
elseif(UNIX)
  # Some linux dist:
  execute_process(COMMAND "lsb_release" "-is" OUTPUT_VARIABLE PKG_TARGET)
  execute_process(COMMAND "lsb_release" "-rs" OUTPUT_VARIABLE PKG_TARGET_VERSION)
  #string(REPLACE "_pi" "" PKG_NVR ${PKG_NVR})
  #set(PKG_NVR "${PKG_NVR}")
else()
  set(PKG_TARGET "unknown")
  set(PKG_TARGET_VERSION 1)
endif()

if(NOT WIN32)
    # default
    set(ARCH "i386")
    if(EXISTS /etc/debian_version)
        if(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "amd64")
        else(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "i386")
        endif(CMAKE_SIZEOF_VOID_P MATCHES "8")
    endif(EXISTS /etc/debian_version)
    if(EXISTS /etc/redhat-release)
        if(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "x86_64")
        else(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "i386")
        endif(CMAKE_SIZEOF_VOID_P MATCHES "8")
    endif(EXISTS /etc/redhat-release)
    if(EXISTS /etc/suse-release OR EXISTS /etc/SuSE-release)
        if(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "x86_64")
        else(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "i386")
        endif(CMAKE_SIZEOF_VOID_P MATCHES "8")
    endif(EXISTS /etc/suse-release OR EXISTS /etc/SuSE-release)
    if(APPLE)
        if(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "x86_64")
        endif(CMAKE_SIZEOF_VOID_P MATCHES "8")
    endif()
else(NOT WIN32)
    set(ARCH "i386")
endif(NOT WIN32)
if(UNIX AND NOT APPLE)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm*")
        set(ARCH "armhf")
        IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
            SET (ARCH "arm64")
        ELSE ()
            SET (ARCH "armhf")
        ENDIF ()
    else()
        if(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "amd64")
            set(CPACK_RPM_PACKAGE_ARCHITECTURE "x86_64")
        else(CMAKE_SIZEOF_VOID_P MATCHES "8")
            set(ARCH "i386")
            # note: in a chroot must use "setarch i686 make package"
            set(CPACK_RPM_PACKAGE_ARCHITECTURE "i686")
        endif(CMAKE_SIZEOF_VOID_P MATCHES "8")
    endif()
endif(UNIX AND NOT APPLE)
message(STATUS "ARCH: ${ARCH}")

string(STRIP ${PKG_TARGET} PKG_TARGET)
string(TOLOWER ${PKG_TARGET} PKG_TARGET)
string(STRIP ${PKG_TARGET_VERSION} PKG_TARGET_VERSION)
string(TOLOWER ${PKG_TARGET_VERSION} PKG_TARGET_VERSION)
set(PKG_TARGET_NVR ${PKG_TARGET}-${PKG_TARGET_VERSION})
message(STATUS "PluginSetup: PKG_TARGET: ${PKG_TARGET}, PKG_TARGET_VERSION: ${PKG_TARGET_VERSION}")
